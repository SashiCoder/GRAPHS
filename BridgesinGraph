// TO FIND BRIDGES IN A GRAPH
void dfs(int i,int &timer,unordered_map<int,list<int>> &adj,vector<int> &disc,vector<int> &low,unordered_map<int,bool>  &visited,int parent,vector<vector<int>> &result){
    visited[i] = true;
    disc[i] = low[i] = timer++;
    for(auto nbr : adj[i]){
        if(nbr == parent){
            continue;
        }
        if(!visited[nbr]){
            dfs(nbr,timer,adj,disc,low,visited,i,result);
            low[i] = min(low[i],low[nbr]);
            // checking for a bridge
            if(low[nbr]>disc[i]){
                vector<int> ans;
                ans.push_back(i);
                ans.push_back(nbr);
                result.push_back(ans);
            }
        }
        else{
            // node is visited and not parent
            low[i] = min(low[i],disc[nbr]);
        }
    }
}

vector<vector<int>> findBridges(vector<vector<int>> &edges, int v, int e) {
    unordered_map<int,list<int>> adj;
    for(int i=0;i<edges.size();i++){
        int u = edges[i][0];
        int v = edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    int timer =0;
    vector<int> disc(v);
    vector<int> low(v);
    int parent =-1;
    unordered_map<int,bool> visited;
    for(int i=0;i<v;i++){
        disc[i] = -1;
        low[i] = -1;
        
    }
    vector<vector<int>> result;
    for(int i=0;i<v;i++){
        if(!visited[i]){
            dfs(i,timer,adj,disc,low,visited,parent,result);
        }
    }
    return result;
}
