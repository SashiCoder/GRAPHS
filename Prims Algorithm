// MINIMUM SPANNING TREE
#include<unordered_map>
#include<list>
#include<limits.h>

vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    // create adjacency list
    unordered_map<int,list <pair<int,int> > > adj;
    for(int i=0;i<g.size();i++){
        int u = g[i].first.first;
        int v = g[i].first.second;
        int w = g[i].second;
        adj[u].push_back(make_pair(v,w));
        adj[v].push_back(make_pair(u,w));
    }
    
    vector<int> key(n+1);
    vector<bool> mst(n+1);
    vector<int> parent(n+1);
    for(int i=0;i<=n;i++){
        key[i]=INT_MAX;
        mst[i] = false;
        parent[i] = -1;
    }
    
    key[1] = 0;
    parent[1] = -1;
    for(int i=1;i<=n;i++){
        int u;
        int mini = INT_MAX;
        for(int j=1;j<=n;j++){
            if(mst[j]==false && key[j]<mini){
                mini = key[j];
                u = j;
            }
        }
        mst[u] = true;
        for(auto k:adj[u]){
            int v = k.first;
            int w = k.second;
            if(mst[v] == false && w<key[v]){
                key[v] = w;
                parent[v] = u;
            }
        }
    }
    vector<pair<pair<int, int>, int>> result;
    for(int j=2;j<=n;j++){
        result.push_back(make_pair(make_pair(parent[j],j),key[j]));
    }
    return result;
}
